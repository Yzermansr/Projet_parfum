# -*- coding: utf-8 -*-
"""Projet_parfum_perso.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NCVMuhaQ_xsiOq1-r83KV_m_3j5maHnK
"""

import sqlite3
import pandas as pd
import numpy as np
from scipy.optimize import linprog
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

from google.colab import files

uploaded = files.upload()

class PreferenceModel:
    def __init__(self, path_ingredients, path_ingredients_nom, path_parfums):
        self.conn_ingredients = sqlite3.connect(path_ingredients)
        self.conn_ingredients_nom = sqlite3.connect(path_ingredients_nom)
        self.conn_parfums = sqlite3.connect(path_parfums)

        self.df_ingredients = pd.read_sql("SELECT * FROM ingredients_id_nom;", self.conn_ingredients_nom)
        self.df_parfums = pd.read_sql("SELECT * FROM parfums_numerotes;", self.conn_parfums)

        self.n_ingredients = self.df_ingredients["ID"].max()
        self.n_parfums = self.df_parfums.shape[0]

        self.V = self._create_parfum_matrix()

    def _create_parfum_matrix(self):
        V = np.zeros((self.n_parfums, self.n_ingredients))
        for idx, row in self.df_parfums.iterrows():
            for part in ['Tete', 'Coeur', 'Fond']:
                if pd.notnull(row[part]):
                    ids = [int(i.strip()) for i in str(row[part]).split(',')]
                    for ing_id in ids:
                        V[idx, ing_id - 1] = 1
        return V

    def build_constraints(self, user_ratings):
        constraints = []
        for i in user_ratings:
            for j in user_ratings:
                if user_ratings[i] > user_ratings[j]:
                    diff = self.V[i] - self.V[j]
                    constraints.append(diff)
        return np.array(constraints)

    def solve_preferences(self, A, epsilon=1e-3):
        c = np.zeros(A.shape[1])
        bounds = [(-10, 10)] * A.shape[1]
        res = linprog(c, A_ub=-A, b_ub=-epsilon * np.ones(A.shape[0]), bounds=bounds, method='highs')
        return res.x if res.success else None

    def visualize_constraints(self, A):
        pca = PCA(n_components=2)
        A_reduced = pca.fit_transform(A)

        plt.figure(figsize=(8, 6))
        for vec in A_reduced:
            plt.arrow(0, 0, vec[0], vec[1], head_width=0.05, alpha=0.5)

        plt.title("Projection 2D des contraintes de préférence")
        plt.xlabel("Composante principale 1")
        plt.ylabel("Composante principale 2")
        plt.grid(True)
        plt.axis("equal")
        plt.show()

model = PreferenceModel("ingredients (2).db", "ingredients_id_nom (1).db", "parfums_numerotes (1).db")

user_ratings = {
    0: 5,
    1: 2,
    2: 3,
    3: 4,
    4: 1,
    5: 5
}

A = model.build_constraints(user_ratings)
u = model.solve_preferences(A)
if u is not None:
    model.visualize_constraints(A)
else:
    print("Aucune solution trouvée.")

